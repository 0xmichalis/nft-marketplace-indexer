type Account {
  id: ID! # wallet address (lowercase)
  address: String! # original case address
  buys: [AccountBuy!]! @derivedFrom(field: "account")
  sells: [AccountSell!]! @derivedFrom(field: "account")
  swaps: [AccountSwap!]! @derivedFrom(field: "account")
}

type NFTContract {
  id: ID! # contract address (lowercase)
  address: String! # original case address
  # All tokens in this contract
  tokens: [NFTToken!]! @derivedFrom(field: "contract")
}

type NFTToken {
  id: ID! # contract_address:token_id (lowercase)
  contract: NFTContract! # reference to parent contract
  tokenId: String!
  # All sales involving this specific token via junction entity
  sales: [SaleNFT!]! @derivedFrom(field: "nftToken")
}

type Sale {
  id: ID!
  timestamp: BigInt!
  transactionHash: String!
  market: String!

  offerer: Account!
  recipient: Account!

  # NFT relationships via junction entity
  nfts: [SaleNFT!]! @derivedFrom(field: "sale")

  # Offer items as parallel arrays
  offerItemTypes: [Int!]!
  offerTokens: [String!]!
  offerIdentifiers: [String!]!
  offerAmounts: [String!]!

  # Consideration items as parallel arrays
  considerationItemTypes: [Int!]!
  considerationTokens: [String!]!
  considerationIdentifiers: [String!]!
  considerationAmounts: [String!]!
  considerationRecipients: [String!]!
}

type SaleNFT {
  id: ID! # saleId:nftTokenId
  sale: Sale!
  nftToken: NFTToken!
}

type AccountBuy {
  id: ID! # accountId:saleId
  account: Account!
  sale: Sale!
}

type AccountSell {
  id: ID! # accountId:saleId
  account: Account!
  sale: Sale!
}

type AccountSwap {
  id: ID! # accountId:saleId
  account: Account!
  sale: Sale!
}
