name: CI

on:
  push:
    branches: [main]
  workflow_dispatch:
  pull_request:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js v20
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Check pnpm version and lockfile
        run: |
          echo "pnpm version: $(pnpm --version)"
          echo "lockfile version: $(head -1 pnpm-lock.yaml || echo 'No lockfile found')"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Format code
        run: pnpm format

      - name: Lint code
        run: pnpm lint

      - name: Generate code from config and schema
        run: pnpm codegen

      - name: Build
        run: pnpm build

      - name: Run tests
        run: pnpm test

  build-and-push:
    needs: [build-and-test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write # Required for OIDC auth (optional for GHCR)
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Docker image
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/nft-marketplace-indexer
          docker build -t $IMAGE_NAME:latest .

      - name: Push to GHCR
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/nft-marketplace-indexer
          docker push $IMAGE_NAME:latest
